{"version":3,"sources":["components/ItemBox.js","actions/index.js","components/CartItems.js","components/FilterItems.js","components/EditForm.js","components/AddNewItemForm.js","App.js","reportWebVitals.js","reducers/index.js","index.js"],"names":["ItemBox","orderBtnHandler","props","addToCart","item","editBtnHandler","displayEditForm","deleteBtnHandler","deleteItem","className","src","this","image","alt","category","name","price","onClick","React","Component","connect","type","payload","CartItems","FilterItems","defaultValue","onChange","event","changeFilter","target","value","disabled","itemCategories","map","state","filter","EditForm","id","itemBeingEdited","indexOfDataFromEditForm","dataFromEditForm","changeHandler","setState","cancelBtnHandler","postEditData","preventDefault","submitBtnHandler","commitEditItemData","onSubmit","htmlFor","required","min","findIndex","data","editFormData","itemData","AddNewItemForm","addNewItemFormData","postAddNewItemData","commitAddNewItemData","App","addNewItemBtnHandler","displayAddNewItemForm","isAppearEditForm","isAppearAddNewItemForm","filterItems","filterSelected","itemsInCart","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","notItemsForDeletion","cartItems","getDataFromEditForm","updatedItemData","newItem","updatedCategories","updatedFilterSelected","initialState","uuid","reducer","action","slice","push","ReactDOM","render","StrictMode","store","createStore","document","getElementById"],"mappings":"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","file":"static/js/main.714c9677.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { addToCart, deleteItem, displayEditForm } from '../actions';\r\n\r\nclass ItemBox extends React.Component {\r\n\r\n  orderBtnHandler = () => {\r\n    this.props.addToCart(this.props.item);\r\n  }\r\n\r\n  editBtnHandler = () => {\r\n    this.props.displayEditForm(this.props.item);\r\n  }\r\n\r\n  deleteBtnHandler = () => {\r\n    this.props.deleteItem(this.props.item);\r\n  }\r\n  \r\n  render(){\r\n    return(\r\n      <div className=\"menuItemOuterContainer\">\r\n        <div className=\"flexContainer menuItem\">\r\n            <div className=\"menuItemsImg\">\r\n              <img src={this.props.item.image} alt={this.props.item.category}/>\r\n            </div>\r\n            <div>\r\n              <strong>{this.props.item.name}</strong>\r\n              <p><small>Php {this.props.item.price}</small></p>\r\n              <p>\r\n                <button \r\n                  onClick={this.orderBtnHandler}\r\n                  className =\"buttonStyle\">Order\r\n                </button>\r\n              </p>\r\n              <p>\r\n                <button \r\n                  onClick={this.editBtnHandler} \r\n                  className =\"buttonStyle\">Edit\r\n                </button>\r\n              </p>\r\n              <p>\r\n                <button \r\n                  onClick={this.deleteBtnHandler} \r\n                  className =\"buttonStyle\">Delete\r\n                </button>\r\n              </p>\r\n            </div>\r\n        </div>\r\n      </div>    \r\n    );\r\n  }\r\n} \r\n\r\n\r\nexport default connect(null, {addToCart, deleteItem, displayEditForm})(ItemBox);","export const addToCart = (item) => {\r\n  return {\r\n    type: 'ADD_TO_CART',\r\n    payload: item    \r\n  };\r\n}\r\n\r\nexport const deleteItem = (item) => {\r\n  return {\r\n    type: 'DELETE_ITEM',\r\n    payload: item    \r\n  };\r\n}\r\n\r\nexport const displayEditForm = (item) => {\r\n  return {\r\n    type: 'DISPLAY_EDIT_FORM',\r\n    payload: item\r\n  };\r\n}\r\n\r\nexport const postEditData = (editFormData) => {\r\n  return {\r\n    type: 'POST_EDIT_DATA',\r\n    payload: editFormData,     \r\n  };\r\n}\r\n\r\nexport const commitEditItemData = (itemData) => {\r\n  return {\r\n    type: 'COMMIT_EDIT_ITEM',\r\n    payload: itemData\r\n  };\r\n}\r\n\r\nexport const changeFilter = (filter) => {\r\n  return {\r\n    type: 'CHANGE_FILTER',\r\n    payload: filter\r\n  };\r\n}\r\n\r\nexport const displayAddNewItemForm = () => {\r\n  return {\r\n    type: 'DISPLAY_ADD_NEW_ITEM_FORM',\r\n  };\r\n};\r\n\r\nexport const postAddNewItemData = (addNewItemFormData) => {\r\n  return {\r\n    type: 'POST_ADD_NEW_ITEM_DATA',\r\n    payload: addNewItemFormData,\r\n  };\r\n}\r\n\r\nexport const commitAddNewItemData = (itemData) => {\r\n  return {\r\n    type: 'COMMIT_ADD_NEW_ITEM',\r\n    payload: itemData,\r\n  };\r\n}","import React from \"react\";\r\n\r\nclass CartItems extends React.Component {\r\n\r\n  render(){\r\n    return(\r\n      <div>{this.props.item.name}</div>    \r\n    );\r\n  }\r\n}\r\n\r\nexport default CartItems;","import React from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { changeFilter } from '../actions';\r\n\r\nclass FilterItems extends React.Component {\r\n\r\n  render(){\r\n    return(\r\n      <select \r\n        defaultValue = \"Default\"\r\n        onChange={ (event) => {\r\n          this.props.changeFilter(event.target.value)\r\n        }}\r\n      >\r\n        <option value=\"Default\" disabled>Select Category</option>\r\n        {this.props.itemCategories.map((category) => {\r\n          return <option \r\n            value={category}\r\n            key={category}>\r\n              {category}\r\n            </option>\r\n        })}\r\n      </select>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    itemCategories: state.itemCategories,\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, {changeFilter})(FilterItems);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { postEditData, commitEditItemData } from '../actions';\r\n\r\nclass EditForm extends React.Component {\r\n\r\n  state = {\r\n    id: this.props.itemBeingEdited.id,\r\n    name: (this.props.indexOfDataFromEditForm === -1 \r\n      ?\r\n      this.props.itemBeingEdited.name\r\n      :\r\n      this.props.dataFromEditForm[this.props.indexOfDataFromEditForm]?.name),\r\n    price: (this.props.indexOfDataFromEditForm === -1 \r\n      ?\r\n      this.props.itemBeingEdited.price\r\n      :\r\n      this.props.dataFromEditForm[this.props.indexOfDataFromEditForm]?.price),\r\n    category: (this.props.indexOfDataFromEditForm === -1 \r\n      ?\r\n      this.props.itemBeingEdited.category\r\n      :\r\n      this.props.dataFromEditForm[this.props.indexOfDataFromEditForm]?.category),\r\n    image: (this.props.indexOfDataFromEditForm === -1 \r\n      ?\r\n      this.props.itemBeingEdited.image\r\n      :\r\n      this.props.dataFromEditForm[this.props.indexOfDataFromEditForm]?.image),\r\n  };\r\n\r\n  //this componet will have the data in the store once it's opened\r\n\r\n  changeHandler = (event) => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  }\r\n\r\n  cancelBtnHandler = (event) => {\r\n\r\n    this.props.postEditData(this.state);\r\n    event.preventDefault();\r\n  }\r\n\r\n  submitBtnHandler = (event) => {\r\n\r\n    this.props.commitEditItemData(this.state);\r\n\r\n    event.preventDefault();\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"editForm\">\r\n        <div className=\"formContent\">\r\n          <div className=\"formContainer\">\r\n            <h2>Edit Item - {this.props.itemBeingEdited.name}</h2>\r\n            <form onSubmit={this.submitBtnHandler}>\r\n              <label htmlFor=\"name\">Name: </label>\r\n              <input \r\n                type=\"text\" \r\n                name=\"name\" \r\n                value={this.state.name} \r\n                onChange={this.changeHandler}\r\n                required\r\n              />\r\n              <br />\r\n              <label htmlFor=\"price\">Price: </label>\r\n              <input \r\n                type=\"number\" \r\n                name=\"price\" \r\n                value={this.state.price} \r\n                onChange={this.changeHandler}\r\n                min='0'\r\n                required\r\n              />\r\n              <br />\r\n              <label htmlFor=\"category\">Category: </label>\r\n              <input \r\n                type=\"text\" \r\n                name=\"category\" \r\n                value={this.state.category} \r\n                onChange={this.changeHandler}\r\n                required\r\n              />\r\n              <br />\r\n              <label htmlFor=\"image\">Image: </label>\r\n              <input \r\n                type=\"text\" \r\n                name=\"image\" \r\n                value={this.state.image} \r\n                onChange={this.changeHandler}\r\n                required\r\n              />\r\n              <div>\r\n                <button \r\n                  className=\"buttonStyle\"\r\n                //   onClick={this.submitBtnHandler}\r\n                >Save</button>\r\n                <button \r\n                  className=\"buttonStyle\" \r\n                  onClick={this.cancelBtnHandler}\r\n                >Cancel</button>\r\n              </div>\r\n            </form>    \r\n          </div>    \r\n        </div>\r\n      </div>\r\n      //Name Price Category Image Save Cancel    \r\n    );    \r\n  }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    itemBeingEdited: state.itemBeingEdited,\r\n    dataFromEditForm: state.dataFromEditForm,\r\n    indexOfDataFromEditForm: state.dataFromEditForm.findIndex((data) => {\r\n      return state.itemBeingEdited.id === data.id;\r\n    }),\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, {postEditData, commitEditItemData})(EditForm);\r\n\r\n//use clicks edit buttn\r\n//editform data gets data from store via id\r\n//one cancel is clicked, data in the form is put in the store","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { postAddNewItemData, commitAddNewItemData } from '../actions';\r\n\r\nclass AddNewItemForm extends React.Component {\r\n\r\n  state = {\r\n    name: this.props.addNewItemFormData.name,\r\n    price: this.props.addNewItemFormData.price,\r\n    category: this.props.addNewItemFormData.category,\r\n    image: this.props.addNewItemFormData.image,\r\n  };\r\n\r\n  //this componet will have the data in the store once it's opened\r\n\r\n  changeHandler = (event) => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  }\r\n\r\n  cancelBtnHandler = (event) => {\r\n\r\n    this.props.postAddNewItemData(this.state);\r\n    event.preventDefault();\r\n  }\r\n\r\n  submitBtnHandler = (event) => {\r\n\r\n    this.props.commitAddNewItemData(this.state);\r\n\r\n    event.preventDefault();\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"editForm\">\r\n        <div className=\"formContent\">\r\n          <div className=\"formContainer\">\r\n            <h2>Add New Item</h2>\r\n            <form onSubmit={this.submitBtnHandler}>\r\n              <label htmlFor=\"name\">Name: </label>\r\n              <input \r\n                type=\"text\" \r\n                name=\"name\" \r\n                value={this.state.name} \r\n                onChange={this.changeHandler}\r\n                required\r\n              />\r\n              <br />\r\n              <label htmlFor=\"price\">Price: </label>\r\n              <input \r\n                type=\"number\" \r\n                name=\"price\" \r\n                value={this.state.price} \r\n                onChange={this.changeHandler}\r\n                min='0'\r\n                required\r\n              />\r\n              <br />\r\n              <label htmlFor=\"category\">Category: </label>\r\n              <input \r\n                type=\"text\" \r\n                name=\"category\" \r\n                value={this.state.category} \r\n                onChange={this.changeHandler}\r\n                required\r\n              />\r\n              <br />\r\n              <label htmlFor=\"image\">Image: </label>\r\n              <input \r\n                type=\"text\" \r\n                name=\"image\" \r\n                value={this.state.image} \r\n                onChange={this.changeHandler}\r\n                required\r\n              />\r\n              <div>\r\n                <button \r\n                  className=\"buttonStyle\"\r\n                //   onClick={this.submitBtnHandler}\r\n                >Save</button>\r\n                <button \r\n                  className=\"buttonStyle\" \r\n                  onClick={this.cancelBtnHandler}\r\n                >Cancel</button>\r\n              </div>\r\n            </form>    \r\n          </div>    \r\n        </div>\r\n      </div>\r\n      //Name Price Category Image Save Cancel    \r\n    );    \r\n  }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    addNewItemFormData: state.addNewItemFormData,\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, {postAddNewItemData, commitAddNewItemData})(AddNewItemForm);\r\n\r\n//use clicks edit buttn\r\n//editform data gets data from store via id\r\n//one cancel is clicked, data in the form is put in the store","// import logo from './logo.svg';\r\nimport React from 'react';\r\nimport './App.css';\r\nimport ItemBox from './components/ItemBox';\r\nimport CartItems from './components/CartItems';\r\nimport FilterItems from './components/FilterItems';\r\nimport EditForm from './components/EditForm';\r\nimport AddNewItemForm from './components/AddNewItemForm';\r\nimport { connect } from 'react-redux';\r\nimport { displayAddNewItemForm } from './actions';\r\n\r\nclass App extends React.Component {\r\n\r\n  addNewItemBtnHandler = () => {\r\n    this.props.displayAddNewItemForm();\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"flexContainer backgroundColor\">\r\n        {this.props.isAppearEditForm ? <EditForm /> : null}\r\n        {this.props.isAppearAddNewItemForm ? <AddNewItemForm /> : null}\r\n        <div className=\"menuItemsContainer\">\r\n          <div>\r\n            <button \r\n              className =\"buttonStyle\"\r\n              onClick={this.addNewItemBtnHandler}\r\n            >Add New Item</button>\r\n          </div>\r\n          <div>\r\n            Filter:{' '}\r\n            <FilterItems \r\n              filterItems={this.filterItems}\r\n            />\r\n          </div>\r\n          <div className=\"flexContainer\">\r\n            {this.props.itemData.filter(\r\n              (item) => {\r\n                if(this.props.filterSelected === 'All'){\r\n                  return item\r\n                } else {\r\n                  return item.category === this.props.filterSelected\r\n                }\r\n              }).map((item) => {\r\n                return <ItemBox \r\n                  key={item.id}\r\n                  item={item}\r\n                />\r\n              })}\r\n          </div>\r\n        </div>\r\n        <div className=\"cartItemsContainer\">\r\n          <h2>Cart</h2>\r\n          {this.props.itemsInCart.map(\r\n            (item, index) => {\r\n              return <CartItems \r\n                key={index}\r\n                item={item}\r\n              />\r\n            }\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n  \r\nconst mapStateToProps = (state) => {\r\n\r\n  return {\r\n    itemData: state.itemData,\r\n    itemsInCart: state.itemsInCart,\r\n    isAppearEditForm: state.isAppearEditForm,\r\n    filterSelected: state.filterSelected,\r\n    isAppearAddNewItemForm: state.isAppearAddNewItemForm,\r\n  }\r\n\r\n};\r\n\r\nexport default connect(mapStateToProps, {displayAddNewItemForm})(App);\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { uuid } from 'uuidv4';\r\n\r\nlet notItemsForDeletion = [];\r\nlet cartItems = [];\r\nlet getDataFromEditForm = [];\r\nlet index = -1;\r\nlet updatedItemData = [];\r\nlet newItem = {};\r\nlet updatedCategories = [];\r\nlet updatedFilterSelected = '';\r\n\r\nconst initialState = {\r\n\r\n  itemData: [\r\n    {\r\n      id: uuid(),\r\n      name: \"Burger\",\r\n      price: 50,\r\n      category: \"Food\",\r\n      image: \"https://image.flaticon.com/icons/svg/1046/1046784.svg\"\r\n    },\r\n    {\r\n      id: uuid(),\r\n      name: \"Pizza\",\r\n      price: 100,\r\n      category: \"Food\",\r\n      image: \"https://image.flaticon.com/icons/svg/1046/1046771.svg\"\r\n    },\r\n    {\r\n      id: uuid(),\r\n      name: \"Fries\",\r\n      price: 25,\r\n      category: \"Food\",\r\n      image: \"https://image.flaticon.com/icons/svg/1046/1046786.svg\"\r\n    },\r\n    {\r\n      id: uuid(),\r\n      name: \"Coffee\",\r\n      price: 35,\r\n      category: \"Drink\",\r\n      image: \"https://image.flaticon.com/icons/svg/1046/1046785.svg\"\r\n    },\r\n    {\r\n      id: uuid(),\r\n      name: \"Iced Tea\",\r\n      price: 45,\r\n      category: \"Drink\",\r\n      image: \"https://image.flaticon.com/icons/svg/1046/1046782.svg\"\r\n    },\r\n    {\r\n      id: uuid(),\r\n      name: \"Hot Tea\",\r\n      price: 45,\r\n      category: \"Drink\",\r\n      image: \"https://image.flaticon.com/icons/svg/1046/1046792.svg\"\r\n    }\r\n  ],\r\n  itemCategories: ['All', 'Food', 'Drink'],\r\n  itemsInCart: [],\r\n  isAppearEditForm: false,\r\n  dataFromEditForm: [], //this saves data of all inputs on the Edit Form, so user\r\n  //can come back later (data will not get removed once user clicks \r\n  //'Cancel'). Once user hits 'Save',\r\n  //the item being edited will be removed from this array\r\n  itemBeingEdited: {},\r\n  filterSelected: 'All',\r\n  isAppearAddNewItemForm: false,\r\n  addNewItemFormData: {\r\n    name: '',\r\n    price: '',\r\n    category: '',\r\n    image: '',\r\n  },\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  \r\n  switch(action.type){\r\n    case 'ADD_TO_CART':\r\n      cartItems = state.itemsInCart.slice(0);\r\n      cartItems.push(action.payload);\r\n\r\n      return {\r\n        ...state,\r\n        itemsInCart: cartItems,\r\n      };\r\n\r\n    case 'DELETE_ITEM':\r\n      notItemsForDeletion = state.itemData.filter((item) => {\r\n        return item.name !== action.payload.name;\r\n      });\r\n\r\n      updatedCategories = state.itemCategories.slice(0);\r\n      updatedFilterSelected = state.filterSelected;\r\n\r\n      //check if the category still exists in other items after deleting the item\r\n      index = notItemsForDeletion.findIndex((item) => {\r\n        return item.category === action.payload.category;\r\n      });\r\n\r\n      //if category doesn't exist (-1), then delete that category as well\r\n      if (index === -1) {\r\n        updatedCategories = updatedCategories.filter((category) => {\r\n          return category !== action.payload.category;\r\n        });\r\n\r\n        if(state.filterSelected === action.payload.category){\r\n          updatedFilterSelected = 'All';\r\n        }\r\n      }\r\n      //if the category is deleted and that is the selected filter, then revert the filter to All as default\r\n\r\n      return {\r\n        ...state,\r\n        itemData: notItemsForDeletion,\r\n        itemCategories: updatedCategories,\r\n        filterSelected: updatedFilterSelected,\r\n      };\r\n\r\n    case 'DISPLAY_EDIT_FORM':\r\n\r\n      //once the use clicks \"Edit\" on an item, the Edit Form is displayed and the item\r\n      //that will be edited is saved to state.itemBeingEdited. This will be used\r\n      //for the data that will be displayed in the Edit Form\r\n      return {\r\n        ...state,\r\n        isAppearEditForm: true,\r\n        itemBeingEdited: action.payload,\r\n      };\r\n\r\n    case 'POST_EDIT_DATA':\r\n      getDataFromEditForm = state.dataFromEditForm.slice(0);\r\n\r\n      //finds index of the item being edited\r\n      index = getDataFromEditForm.findIndex((data) => {\r\n        return data.id === action.payload.id;\r\n      });\r\n\r\n      //update that item\r\n      getDataFromEditForm[index] = action.payload;\r\n\r\n      if(index !== -1){\r\n        getDataFromEditForm[index] = action.payload;\r\n      } else {\r\n        getDataFromEditForm.push(action.payload);\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        isAppearEditForm: false,\r\n        dataFromEditForm: getDataFromEditForm,\r\n      };\r\n\r\n    case 'COMMIT_EDIT_ITEM':\r\n      //remove item from dataFromEditForm\r\n      notItemsForDeletion = state.dataFromEditForm.filter((data) => {\r\n        return data.id !== action.payload.id;\r\n      });\r\n\r\n      //edit the item in the itemData\r\n      updatedItemData = state.itemData.slice(0); \r\n      index = updatedItemData.findIndex((data) => {\r\n        return data.id === action.payload.id;\r\n      });\r\n\r\n      updatedItemData[index] = action.payload;\r\n\r\n      updatedCategories = state.itemCategories.slice(0);\r\n\r\n      //check if the category exists\r\n      index = updatedCategories.findIndex((category) => {\r\n        return category === action.payload.category;\r\n      });\r\n\r\n      if (index === -1) {\r\n        updatedCategories.push(action.payload.category)\r\n      }\r\n \r\n      return {\r\n        ...state,\r\n        dataFromEditForm: notItemsForDeletion,\r\n        isAppearEditForm: false,\r\n        itemData: updatedItemData,\r\n        itemCategories: updatedCategories,\r\n      };\r\n\r\n    case 'CHANGE_FILTER':\r\n\r\n      updatedFilterSelected = action.payload;\r\n\r\n      return {\r\n        ...state,\r\n        filterSelected: updatedFilterSelected,\r\n      };\r\n\r\n    case 'DISPLAY_ADD_NEW_ITEM_FORM':\r\n      return {\r\n        ...state,\r\n        isAppearAddNewItemForm: true,\r\n      };\r\n\r\n    case 'POST_ADD_NEW_ITEM_DATA':\r\n      return {\r\n        ...state,\r\n        addNewItemFormData: action.payload,\r\n        isAppearAddNewItemForm: false,\r\n      }\r\n\r\n    case 'COMMIT_ADD_NEW_ITEM':\r\n\r\n      newItem = {\r\n        ...action.payload,\r\n        id: uuid(),\r\n      };\r\n\r\n      updatedItemData = state.itemData.slice(0);\r\n      updatedItemData.push(newItem);\r\n\r\n      updatedCategories = state.itemCategories.slice(0);\r\n\r\n      //check if the category exists\r\n      index = updatedCategories.findIndex((category) => {\r\n        return category === action.payload.category;\r\n      });\r\n\r\n      if (index === -1) {\r\n        updatedCategories.push(action.payload.category)\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        itemData: updatedItemData,\r\n        isAppearAddNewItemForm: false,\r\n        addNewItemFormData: {\r\n          name: '',\r\n          price: '',\r\n          category: '',\r\n          image: ''\r\n        },\r\n        itemCategories: updatedCategories,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n\r\n  \r\n}\r\n\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport reducer from './reducers';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={createStore(reducer)}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}